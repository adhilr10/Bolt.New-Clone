const {
    GoogleGenerativeAI,
    HarmCategory,
    HarmBlockThreshold,
  } = require("@google/generative-ai");
  
  const apiKey = process.env.NEXT_PUBLIC_GEMINI_API_KEY;
  const genAI = new GoogleGenerativeAI(apiKey);
  
  const model = genAI.getGenerativeModel({
    model: "gemini-2.0-flash-exp",
  });
  
  const generationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "text/plain",
  };
  const CodegenerationConfig = {
    temperature: 1,
    topP: 0.95,
    topK: 40,
    maxOutputTokens: 8192,
    responseMimeType: "application/json",
  };
  

   export const chatSession = model.startChat({
      generationConfig,
      history: [
      ],
    });

    export const GenAiCode = model.startChat({
      generationConfig: CodegenerationConfig,
      history: [
        {
          role: "user",
          parts: [
            {text: "create todo app\nGenerate a Project in React. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, \nwithout any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\nalso you can use date-fns for date format and react-chartjs-2 chart, graph library\n\nReturn the response in JSON format with the following schema:\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\n\nHere‚Äôs the reformatted and improved version of your prompt:\n\nGenerate a programming code structure for a React project using Vite. Create multiple components, organizing them in separate folders with filenames using the .js extension, if needed. The output should use Tailwind CSS for styling, without any third-party dependencies or libraries, except for icons from the lucide-react library, which should only be used when necessary. Available icons include: Heart, Shield, Clock, Users, Play, Home, Search, Menu, User, Settings, Mail, Bell, Calendar, Star, Upload, Download, Trash, Edit, Plus, Minus, Check, X, and ArrowRight. For example, you can import an icon as import { Heart } from \"lucide-react\" and use it in JSX as <Heart className=\"\" />.\n\nReturn the response in JSON format with the following schema:\n\njson\nCopy code\n{\n  \"projectTitle\": \"\",\n  \"explanation\": \"\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"\"\n    },\n    ...\n  },\n  \"generatedFiles\": []\n}\nEnsure the files field contains all created files, and the generatedFiles field lists all the filenames. Each file's code should be included in the code field, following this example:\nfiles:{\n  \"/App.js\": {\n    \"code\": \"import React from 'react';\\nimport './styles.css';\\nexport default function App() {\\n  return (\\n    <div className='p-4 bg-gray-100 text-center'>\\n      <h1 className='text-2xl font-bold text-blue-500'>Hello, Tailwind CSS with Sandpack!</h1>\\n      <p className='mt-2 text-gray-700'>This is a live code editor.</p>\\n    </div>\\n  );\\n}\"\n  }\n}\n  Additionally, include an explanation of the project's structure, purpose, and functionality in the explanation field. Make the response concise and clear in one paragraph.\n  - When asked then only use this package to import, here are some packages available to import and use (date-fns,react-chartjs-2,\"firebase\",\"@google/generative-ai\" ) only when it required\n  \n  - For placeholder images, please use a https://archive.org/download/placeholder-image/placeholder-image.jpg\n  -Add Emoji icons whenever needed to give good user experinence\n  - all designs I ask you to make, have them be beautiful, not cookie cutter. Make webpages that are fully featured and worthy for production.\n\n- By default, this template supports JSX syntax with Tailwind CSS classes, React hooks, and Lucide React for icons. Do not install other packages for UI themes, icons, etc unless absolutely necessary or I request them.\n\n- Use icons from lucide-react for logos.\n\n- Use stock photos from unsplash where appropriate, only valid URLs you know exist. Do not download the images, only link to them in image tags.\n   `,\n"},
          ],
        },
        {
          role: "model",
          parts: [
            {text: "```json\n{\n  \"projectTitle\": \"Todo App\",\n  \"explanation\": \"This project is a Todo application built with React, utilizing Tailwind CSS for styling, date-fns for date manipulation, react-chartjs-2 for graphs and lucide-react for icons. It provides functionalities to add, edit, and delete todo tasks, displaying them in a user-friendly list. The app is structured into several components, including a main App component, a TodoList, a TodoItem, and an AddTodo component, and graphs that visually represent the user‚Äôs task completion progress. The main focus is to create a fully functional and visually appealing app without relying on external UI libraries.\",\n  \"files\": {\n    \"/App.js\": {\n      \"code\": \"import React, { useState, useEffect } from 'react';\\nimport { format } from 'date-fns';\\nimport TodoList from './components/TodoList';\\nimport AddTodo from './components/AddTodo';\\nimport { Chart, ArcElement, Tooltip, Legend } from 'chart.js';\\nimport { Pie } from 'react-chartjs-2';\\nChart.register(ArcElement, Tooltip, Legend);\\n\\n\\n\\nconst App = () => {\\n  const [todos, setTodos] = useState(() => {\\n    const savedTodos = localStorage.getItem('todos');\\n    if (savedTodos) {\\n      return JSON.parse(savedTodos);\\n    }\\n    return [];\\n  });\\n  \\n\\n  useEffect(() => {\\n    localStorage.setItem('todos', JSON.stringify(todos));\\n  }, [todos]);\\n\\n  const addTodo = (text) => {\\n    const newTodo = {\\n      id: Date.now(),\\n      text,\\n      completed: false,\\n      createdAt: new Date()\\n    };\\n    setTodos([...todos, newTodo]);\\n  };\\n\\n  const toggleComplete = (id) => {\\n      setTodos(todos.map(todo => todo.id === id ? {...todo, completed: !todo.completed} : todo))\\n  }\\n\\n\\n  const deleteTodo = (id) => {\\n    setTodos(todos.filter(todo => todo.id !== id));\\n  };\\n  const editTodo = (id, newText) => {\\n    setTodos(todos.map(todo => todo.id === id ? { ...todo, text: newText } : todo));\\n  };\\n\\n  const completedTasks = todos.filter(todo => todo.completed).length;\\n    const pendingTasks = todos.length - completedTasks;\\n    \\n    const chartData = {\\n        labels: ['Completed', 'Pending'],\\n        datasets: [\\n          {\\n            data: [completedTasks, pendingTasks],\\n            backgroundColor: ['#36a2eb', '#ff6384'],\\n            hoverBackgroundColor: ['#36a2eb', '#ff6384']\\n          }\\n        ]\\n      };\\n      const chartOptions = {\\n        responsive: true,\\n        maintainAspectRatio: false,\\n        plugins: {\\n            legend: {\\n                position: 'bottom',\\n              },\\n          },\\n      };\\n    \\n\\n  return (\\n    <div className=\\\"min-h-screen bg-gray-100 flex flex-col items-center p-4\\\">\\n        <h1 className=\\\"text-3xl font-bold mb-8 text-gray-800\\\">My Todo List üìù</h1>\\n          <div className=\\\"w-full max-w-2xl flex justify-between items-center mb-4\\\">\\n            <AddTodo addTodo={addTodo} />\\n            \\n           \\n           \\n            </div>\\n        <div className='w-full max-w-2xl flex  bg-white rounded-lg shadow overflow-hidden  mb-4'>\\n          <div className='w-1/2 p-4'>\\n               <Pie data={chartData} options={chartOptions}   />\\n          </div>\\n             <div className='w-1/2 p-4'>\\n            <p className='text-center text-gray-700 font-medium'>Current Tasks</p>\\n            <div className='flex justify-between mt-4'>\\n               <p className='text-center text-gray-700 '>Completed Tasks : {completedTasks}</p>\\n                <p className='text-center text-gray-700 '>Pending Tasks: {pendingTasks}</p>\\n            </div>\\n        </div>\\n          \\n        </div>\\n        <TodoList todos={todos} toggleComplete={toggleComplete} deleteTodo={deleteTodo} editTodo={editTodo} />\\n      \\n        <p className='mt-4 text-center text-gray-500 text-sm'>Created on: {format(new Date(), 'MMMM dd, yyyy')}</p>\\n    </div>\\n  );\\n};\\n\\nexport default App;\\n\"\n    },\n    \"/components/TodoList.js\": {\n      \"code\": \"import React from 'react';\\nimport TodoItem from './TodoItem';\\n\\nconst TodoList = ({ todos, toggleComplete, deleteTodo, editTodo }) => {\\n  return (\\n    <div className=\\\"w-full max-w-2xl  bg-white rounded-lg shadow overflow-hidden\\\">\\n      {todos.length === 0 ? (\\n        <p className='text-center p-4 text-gray-600'>No tasks yet. Add some! üôÇ</p>\\n      ) :(\\n        <ul className=\\\"divide-y divide-gray-200\\\">\\n            {todos.map(todo => (\\n            <TodoItem \\n              key={todo.id}\\n              todo={todo}\\n              toggleComplete={toggleComplete}\\n              deleteTodo={deleteTodo}\\n              editTodo={editTodo}  \\n            />\\n          ))}\\n        </ul>\\n      )}\\n      \\n    </div>\\n  );\\n};\\n\\nexport default TodoList;\\n\"\n    },\n    \"/components/TodoItem.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Trash, Edit, Check, X } from 'lucide-react';\\n\\nconst TodoItem = ({ todo, toggleComplete, deleteTodo, editTodo }) => {\\n  const [isEditing, setIsEditing] = useState(false);\\n  const [editedText, setEditedText] = useState(todo.text);\\n\\n    const handleEdit = () => {\\n        setIsEditing(true);\\n      };\\n    const handleSave = () => {\\n        editTodo(todo.id, editedText);\\n        setIsEditing(false);\\n      };\\n      const handleCancel = () => {\\n        setEditedText(todo.text);\\n        setIsEditing(false);\\n      };\\n\\n  return (\\n    <li className=\\\"p-4 flex items-center justify-between hover:bg-gray-50\\\">\\n      {isEditing ? (\\n        <div className='flex items-center space-x-2'>\\n           <input\\n                type='text'\\n                value={editedText}\\n                onChange={(e) => setEditedText(e.target.value)}\\n                className='border rounded p-2 text-gray-700 focus:outline-none'\\n              />\\n              <div className='flex space-x-2'>\\n                  <button onClick={handleSave} className='text-green-500 hover:text-green-700 focus:outline-none'><Check className='h-5 w-5' /></button>\\n                  <button onClick={handleCancel} className='text-red-500 hover:text-red-700 focus:outline-none'><X className='h-5 w-5' /></button>\\n              </div>\\n        </div>\\n       ) : (\\n        <div className='flex items-center w-full justify-between'>\\n           <label className={`flex items-center space-x-2 ${todo.completed ? 'line-through text-gray-500' : '' }`}>\\n              <input \\n                type='checkbox' \\n                checked={todo.completed} \\n                onChange={() => toggleComplete(todo.id)}\\n                className='form-checkbox h-4 w-4 text-blue-600 rounded focus:ring-0 focus:outline-none' \\n            />\\n              <span className='select-none'>{todo.text}</span>\\n            </label>\\n            <div className='flex space-x-2'>\\n              <button onClick={handleEdit} className='text-blue-500 hover:text-blue-700 focus:outline-none'><Edit className='h-5 w-5' /></button>\\n              <button onClick={() => deleteTodo(todo.id)} className='text-red-500 hover:text-red-700 focus:outline-none'><Trash className='h-5 w-5' /></button>\\n            </div>\\n        </div>\\n    )}\\n    \\n    </li>\\n  );\\n};\\n\\nexport default TodoItem;\\n\"\n    },\n    \"/components/AddTodo.js\": {\n      \"code\": \"import React, { useState } from 'react';\\nimport { Plus } from 'lucide-react';\\n\\nconst AddTodo = ({ addTodo }) => {\\n  const [text, setText] = useState('');\\n\\n  const handleSubmit = (e) => {\\n    e.preventDefault();\\n    if (text.trim() !== '') {\\n      addTodo(text);\\n      setText('');\\n    }\\n  };\\n\\n  return (\\n    <form onSubmit={handleSubmit} className=\\\"flex items-center space-x-2\\\">\\n      <input\\n        type=\\\"text\\\"\\n        placeholder=\\\"Add new todo...\\\"  \\n        value={text}\\n        onChange={(e) => setText(e.target.value)}\\n        className=\\\"border rounded p-2 text-gray-700 focus:outline-none\\\"\\n      />\\n      <button type=\\\"submit\\\" className=\\\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none\\\">\\n         <Plus className='h-5 w-5' />\\n      </button>\\n    </form>\\n  );\\n};\\n\\nexport default AddTodo;\\n\"\n    }\n  },\n  \"generatedFiles\": [\n    \"/App.js\",\n    \"/components/TodoList.js\",\n    \"/components/TodoItem.js\",\n    \"/components/AddTodo.js\"\n  ]\n}\n```\n"},
          ],
        },
      ],
    })
  
    // const result = await chatSession.sendMessage("INSERT_INPUT_HERE");
    // console.log(result.response.text());
  
  
